// ---------- GENERATORS & DATASOURCES ----------
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  github_token  String?
  emailVerified DateTime?
  name          String?
  avatar        String?
  banner        String?
  bio           String?

  role UserRole @default(USER)

  accounts               Account[]
  ownedProjects          Project[]          @relation("ProjectOwner")
  memberships            ProjectMember[]
  conversations          UserConversation[]
  messages               Message[]
  reactions              Reaction[]
  friendRequestsSent     FriendRequest[]    @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[]    @relation("FriendRequestsReceived")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

// ---------- FRIEND REQUEST MODEL ----------

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED // WITHDRAWN
}

model FriendRequest {
  id String @id @default(cuid())

  requesterId String
  receiverId  String

  receiver  User                @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
  requester User                @relation("FriendRequestsSent", fields: [requesterId], references: [id])
  status    FriendRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requesterId, receiverId])
}

// ---------- PROJECT, MEMBERSHIP & ROLE MODELS ----------

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  banner      String?
  repo        String? @unique

  categories  Category[]
  channels    Channel[]
  roles       Role[]
  attachments Attachment[]

  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Memberships track which users belong to the project.
  memberships ProjectMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Join table for users that belong to a project.
/// Optionally, you can assign a role to a member here.
model ProjectMember {
  userId    String
  projectId String
  // Optionally, assign a role per membership
  roleId    String?

  joinedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role    Role?   @relation("RoleProjectMembers", fields: [roleId], references: [id])

  @@id([userId, projectId])
}

model Role {
  id    String  @id @default(cuid())
  name  String
  color String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  // Back-relation for project memberships that use this role.
  projectMembers ProjectMember[] @relation("RoleProjectMembers")

  // Instead of implicit many-to-many fields, we use an explicit join model.
  roleChannels RoleChannel[] @relation("RoleToRoleChannel")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit join model for Role <-> Channel relation with custom attributes.
model RoleChannel {
  roleId    String
  channelId String

  // Use explicit relation names.
  role    Role    @relation("RoleToRoleChannel", fields: [roleId], references: [id])
  channel Channel @relation("ChannelToRoleChannel", fields: [channelId], references: [id])

  // Uncomment and add custom permission attributes if needed.
  // canPost   Boolean @default(true)
  // canDelete Boolean @default(false)
  // canEdit   Boolean @default(false)

  @@id([roleId, channelId])
}

// ---------- CATEGORY & CHANNEL MODELS ----------

model Category {
  id    String @id @default(cuid())
  name  String
  order Int?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String?
  channelType ChannelType

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  /// A channel may have a default conversation (e.g., text chat)
  conversation Conversation?

  // Instead of an implicit many-to-many field, we use the join model.
  roleChannels RoleChannel[] @relation("ChannelToRoleChannel")
  attachments  Attachment[]

  forumLayout ForumLayout?
  order       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ForumLayout {
  DEFAULT
  COMPACT
  GRID
}

enum ChannelType {
  RULES
  TEXT
  TEXT_LIMITED
  TEXT_ACTIVE_THREAD
  TEXT_THREAD_PRIVATE
  VOICE
  VOICE_LIMITED
  ANNOUNCEMENT
  ANNOUNCEMENT_LIMITED
  STAGE
  FORUM
  FORUM_LIMITED
  VIDEO
}

// ---------- CONVERSATION & USERCONVERSATION MODELS ----------

model Conversation {
  id         String           @id @default(cuid())
  name       String?
  type       ConversationType
  nameEdited DateTime?

  // WIP: Implement image
  //? For DM:- It would be image of both users
  //? For Group:- It would be random image with logo and bg color
  //? For Channel:- It would be some icon(default like #) or emoji

  // For DM and GROUP_DM, these arrays represent the admins and participants.
  users UserConversation[]

  messages    Message[]
  attachments Attachment[]

  // Add a back-relation for threads (from Thread.parentConversation).
  threads Thread[] @relation("ParentConversationThreads")

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ConversationType {
  DM
  GROUP_DM
  CHANNEL
  // THREAD conversations will now be managed explicitly via the Thread model.
}

// Join table for conversations (DMs, Group chats, etc.)
model UserConversation {
  userId         String
  conversationId String
  isAdmin        Boolean  @default(false)
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

// ---------- MESSAGE & THREAD MODELS ----------

/// Dedicated model for Threads, which groups messages together.
/// This lets you track metadata such as lastActiveAt for autoâ€‘deletion.
model Thread {
  id                   String       @id @default(cuid())
  /// Reference to the parent conversation (e.g., the channel conversation)
  parentConversationId String
  parentConversation   Conversation @relation("ParentConversationThreads", fields: [parentConversationId], references: [id])

  /// This field should be updated whenever a new message is added to the thread.
  lastActiveAt DateTime @default(now())

  /// All messages in this thread.
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String  @id @default(cuid())
  content        String?
  senderId       String?
  conversationId String
  edited         Boolean @default(false)

  fileUrl    String?
  duration   Int?
  systemData String?

  attachment Attachment[]
  embed      Embed[]
  reactions  Reaction[]
  // messageReference MessageReference?

  sender       User?        @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  /// Instead of linking a message directly to a thread conversation,
  /// we now refer to the Thread model explicitly.
  threadId String?
  thread   Thread? @relation(fields: [threadId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?

  @@index([conversationId])
}

model Attachment {
  id                 String  @id
  messageId          String
  filename           String  @db.VarChar(260)
  size               Int
  url                String  @db.Text
  proxyUrl           String  @db.Text
  width              Int?
  height             Int?
  duration           Int? // For audio/video length (in seconds)
  contentType        String  @db.VarChar(100)
  flags              Int?
  placeholder        String? @db.Text
  placeholderVersion Int?
  title              String? @db.VarChar(100)
  contentScanVersion Int?
  metadata           Json? // For extra metadata (e.g., PDF page count)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversationId String
  channelId      String?
  projectId      String?

  conversation Conversation @relation(fields: [conversationId], references: [id])
  channel      Channel?     @relation(fields: [channelId], references: [id])
  project      Project?     @relation(fields: [projectId], references: [id])
  message      Message      @relation(fields: [messageId], references: [id])

  @@index([messageId])
  @@index([contentType])
}

model Embed {
  id                 Int       @id @default(autoincrement())
  messageId          String
  type               EmbedType // Using enum for better type-safety
  contentScanVersion Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  message Message      @relation(fields: [messageId], references: [id])
  fields  EmbedField[]

  @@index([messageId])
  @@index([type])
}

model EmbedField {
  id      Int      @id @default(autoincrement())
  embedId Int
  name    String   @db.VarChar(256)
  value   String   @db.Text
  inline  Boolean?

  // Relations
  embed Embed @relation(fields: [embedId], references: [id])

  @@index([embedId])
}

model Reaction {
  messageId  String
  emojiId    String  @db.VarChar(20) // Made required to work with the composite key
  emojiName  String  @db.VarChar(32)
  count      Int     @default(0)
  burstCount Int     @default(0)
  me         Boolean @default(false)
  burstMe    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  message Message @relation(fields: [messageId], references: [id])
  user    User?   @relation(fields: [emojiId], references: [id])

  @@id([messageId, emojiId, emojiName])
  @@index([emojiId, emojiName])
}

// model Message

enum EmbedType {
  RICH
  IMAGE
  VIDEO
  AUDIO
  FILE
  LINK
}
